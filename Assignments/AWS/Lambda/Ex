----------------------------------------------------------------------------
1 - cost optimization using Lambda function. 
----------------------------------------------------------------------------
1. create 1 ec2  with any configuration
    Name - cost-ec2
    Volume - 8gb 

2. create a snapshot from the volume of the instance cost-ec2 
    Name - snap1

3. create a additional volume (new-ebs) and create a snapshot from it as 
    EBS name -  new-ebs  
    snap Name - snap2

4. create a lambda function in which pasted the below code to delete the  stale resource (snapshots).
      name - lab2 
    Code: .py 
import boto3
def lambda_handler(event, context):
    ec2 = boto3.client('ec2')
    # Get all EBS snapshots
    response = ec2.describe_snapshots(OwnerIds=['self'])
    # Get all active EC2 instance IDs
    instances_response = ec2.describe_instances(Filters=[{'Name':
'instance-state-name', 'Values': ['running']}])
    active_instance_ids = set()
    for reservation in instances_response['Reservations']:
        for instance in reservation['Instances']:
            active_instance_ids.add(instance['InstanceId'])
# Iterate through each snapshot and delete if it's not attached to any volume or the volume is not attached to a running instance
    for snapshot in response['Snapshots']:
        snapshot_id = snapshot['SnapshotId']
        volume_id = snapshot.get('VolumeId')
        if not volume_id:
            # Delete the snapshot if it's not attached to any volume
            ec2.delete_snapshot(SnapshotId=snapshot_id)
            print(f"Deleted EBS snapshot {snapshot_id} as it was not attached to any volume.")
        else:
            # Check if the volume still exists
            try:
                volume_response = ec2.describe_volumes(VolumeIds=[volume_id])
                if not volume_response['Volumes'][0]['Attachments']:
                    ec2.delete_snapshot(SnapshotId=snapshot_id)
                    print(f"Deleted EBS snapshot {snapshot_id} as it was taken from a volume not attached to any running instance.")
            except ec2.exceptions.ClientError as e:
                if e.response['Error']['Code'] == 'InvalidVolume.NotFound':
# The volume associated with the snapshot is not found (it might have been deleted)
                      ec2.delete_snapshot(SnapshotId=snapshot_id)
                      print(f"Deleted EBS snapshot {snapshot_id} as its associated volume was not found.")

5 . Deleted the Ec2 instance, ran the lambda function again and verified if it deletes the snapshot whose ebs volume is not found as the ec2 was deleted.


--------------------------------------------------------------------------------------------------------------------------------------------------------
2. 
--------------------------------------------------------------------------------------------------------------------------------------------------------













--------------------------------------------------------------------------------------------------------------------------------------------------------
